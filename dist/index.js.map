{"version":3,"sources":["../src/actions/startSession.ts","../src/providers/devinRequests.ts","../src/providers/devinProvider.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type IAgentRuntime,\n    type Memory,\n    type HandlerCallback,\n    type State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { createSession } from \"../providers/devinRequests\";\n\nexport const startSessionAction: Action = {\n    name: \"START_DEVIN_SESSION\",\n    description: \"Creates a new Devin session and returns session info\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        return !!runtime.getSetting(\"DEVIN_API_TOKEN\");\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options?: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        try {\n            if (!callback) {\n                elizaLogger.error(\"No callback provided for startSessionAction\");\n                return;\n            }\n\n            const prompt = message.content.text;\n            if (!prompt) {\n                callback({ text: \"No prompt provided for session creation\" }, []);\n                return;\n            }\n\n            const sessionInfo = await createSession(runtime, prompt);\n            callback(\n                {\n                    text: `New Devin session created successfully:\nSession ID: ${sessionInfo.session_id}\nStatus: ${sessionInfo.status_enum}\nURL: ${sessionInfo.url}`,\n                    action: \"START_SESSION\",\n                },\n                []\n            );\n        } catch (error) {\n            elizaLogger.error(\"Error creating Devin session:\", error);\n            if (!callback) {\n                return;\n            }\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            callback(\n                {\n                    text: `Failed to create Devin session: ${errorMessage}`,\n                    error: errorMessage,\n                },\n                []\n            );\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Start a new Devin session with prompt: Help me with my code\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"New Devin session created successfully:\\nSession ID: abc123\\nStatus: running\\nURL: https://app.devin.ai/sessions/abc123\",\n                    action: \"START_SESSION\"\n                },\n            },\n        ],\n    ],\n    similes: [\"create devin session\", \"start devin session\", \"begin devin session\"],\n};\n","import { type IAgentRuntime, elizaLogger } from \"@elizaos/core\";\nimport fetch from \"node-fetch\";\n\nconst API_BASE = \"https://api.devin.ai/v1\";\nconst MIN_REQUEST_INTERVAL = 1000; // 1 second for rate limiting\nconst MAX_RETRIES = 3;\nconst INITIAL_BACKOFF = 1000; // 1 second initial backoff\n\nlet lastRequestTime = 0;\n\n/**\n * Interface representing a Devin session\n */\nexport interface DevinSession {\n    session_id: string;\n    url: string;\n    status_enum: \"running\" | \"blocked\" | \"stopped\";\n    structured_output?: Record<string, unknown>;\n}\n\n/**\n * Interface representing an error response from the Devin API\n */\n\n// interface DevinError {\n//     error: string;\n//     message: string;\n//     status: number;\n// }\n\n/**\n * Rate limiting function to prevent API abuse\n * Ensures at least MIN_REQUEST_INTERVAL milliseconds between requests\n */\nasync function rateLimit() {\n    const now = Date.now();\n    const timeSinceLastRequest = now - lastRequestTime;\n    if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\n        await new Promise(resolve => setTimeout(resolve, MIN_REQUEST_INTERVAL - timeSinceLastRequest));\n    }\n    lastRequestTime = Date.now();\n}\n\n/**\n * Helper function to implement exponential backoff for API requests\n * @param fn The async function to retry\n * @param retries Maximum number of retries\n * @param backoff Initial backoff in milliseconds\n * @returns The result of the async function\n * @throws The last error encountered\n */\nasync function withRetry<T>(\n    fn: () => Promise<T>,\n    retries = MAX_RETRIES,\n    backoff = INITIAL_BACKOFF\n): Promise<T> {\n    try {\n        return await fn();\n    } catch (error) {\n        if (retries === 0) throw error;\n        \n        await new Promise(resolve => setTimeout(resolve, backoff));\n        return withRetry(fn, retries - 1, backoff * 2);\n    }\n}\n// Implementation moved to the top of the file\n\n/**\n * Creates a new Devin session with the given prompt\n * @param runtime The Eliza runtime instance\n * @param prompt The prompt to start the session with\n * @returns The created session details\n * @throws {Error} If API token is missing or API request fails\n */\nexport async function createSession(runtime: IAgentRuntime, prompt: string): Promise<DevinSession> {\n    const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\n    if (!API_KEY) {\n        const error = new Error(\"No Devin API token found\") as Error & { status?: number };\n        error.status = 401;\n        throw error;\n    }\n\n    await rateLimit();\n    return withRetry(async () => {\n        const response = await fetch(`${API_BASE}/sessions`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${API_KEY}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ prompt }),\n        });\n\n        if (!response.ok) {\n            const error = await response.text();\n            elizaLogger.error(\"Failed to create Devin session:\", error);\n            throw new Error(`Failed to create session: ${error}`);\n        }\n\n        const data = await response.json();\n        return data as DevinSession;\n    });\n}\n\n/**\n * Retrieves details for an existing Devin session\n * @param runtime The Eliza runtime instance\n * @param sessionId The ID of the session to retrieve\n * @returns The session details\n * @throws {Error} If API token is missing or API request fails\n */\nexport async function getSessionDetails(runtime: IAgentRuntime, sessionId: string): Promise<DevinSession> {\n    const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\n    if (!API_KEY) {\n        const error = new Error(\"No Devin API token found\") as Error & { status?: number };\n        error.status = 401;\n        throw error;\n    }\n\n    await rateLimit();\n    return withRetry(async () => {\n        const response = await fetch(`${API_BASE}/session/${sessionId}`, {\n            headers: {\n                \"Authorization\": `Bearer ${API_KEY}`,\n            },\n        });\n\n        if (!response.ok) {\n            const error = await response.text();\n            elizaLogger.error(\"Failed to get session details:\", error);\n            const apiError = new Error(`Failed to get session details: ${error}`) as Error & { status?: number };\n            apiError.status = response.status;\n            throw apiError;\n        }\n\n        const data = await response.json();\n        return data as DevinSession;\n    });\n}\n\n/**\n * Sends a message to an existing Devin session\n * @param runtime The Eliza runtime instance\n * @param sessionId The ID of the session to send the message to\n * @param message The message content to send\n * @throws {Error} If API token is missing or API request fails\n */\nexport async function sendMessage(runtime: IAgentRuntime, sessionId: string, message: string): Promise<void> {\n    const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\n    if (!API_KEY) {\n        const error = new Error(\"No Devin API token found\") as Error & { status?: number };\n        error.status = 401;\n        throw error;\n    }\n\n    await rateLimit();\n    return withRetry(async () => {\n        const response = await fetch(`${API_BASE}/session/${sessionId}/message`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${API_KEY}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ message }),\n        });\n\n        if (!response.ok) {\n            const error = await response.text();\n            elizaLogger.error(\"Failed to send message:\", error);\n            const apiError = new Error(`Failed to send message: ${error}`) as Error & { status?: number };\n            apiError.status = response.status;\n            throw apiError;\n        }\n    });\n}\n","import {\n    type Provider,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { createSession, getSessionDetails, sendMessage } from \"./devinRequests\";\n\n/**\n * Interface representing the state of a Devin session in the provider\n */\nexport interface DevinState {\n    sessionId?: string;\n    status?: \"running\" | \"blocked\" | \"stopped\";\n    lastUpdate?: number;\n    error?: string;\n    structured_output?: Record<string, unknown>;\n    url?: string;\n}\n\n/**\n * Provider for interacting with the Devin API\n * Manages session state and provides methods for creating sessions and sending messages\n */\nexport const devinProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory, state?: State) => {\n        try {\n            const API_KEY = runtime.getSetting(\"DEVIN_API_TOKEN\");\n            if (!API_KEY) {\n                elizaLogger.error(\"No Devin API token found\");\n                return {\n                    error: \"No Devin API token found\",\n                    lastUpdate: Date.now(),\n                };\n            }\n\n            const devinState = (state?.devin || {}) as DevinState;\n            \n            // If we have an active session, get its status\n            if (devinState.sessionId) {\n                try {\n                    const sessionDetails = await getSessionDetails(runtime, devinState.sessionId);\n                    return {\n                        sessionId: sessionDetails.session_id,\n                        status: sessionDetails.status_enum,\n                        url: sessionDetails.url,\n                        lastUpdate: Date.now(),\n                        structured_output: sessionDetails.structured_output,\n                    };\n                } catch (error) {\n                    elizaLogger.error(\"Error fetching session details:\", error);\n                    return {\n                        error: \"Failed to fetch session details\",\n                        lastUpdate: Date.now(),\n                        sessionId: devinState.sessionId, // Keep the session ID for reference\n                    };\n                }\n            }\n\n            // No active session\n            return {\n                lastUpdate: Date.now(),\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in devinProvider:\", error);\n            return {\n                error: \"Internal provider error\",\n                lastUpdate: Date.now(),\n            };\n        }\n    },\n};\n","import type { Plugin } from \"@elizaos/core\";\nimport { startSessionAction } from \"./actions/startSession\";\nimport { devinProvider } from \"./providers/devinProvider\";\nimport { validateDevinConfig } from \"./environment\";\n\nexport const devinPlugin: Plugin = {\n    name: \"devinPlugin\",\n    description: \"Integrates Devin API with Eliza for task automation and session management\",\n    actions: [startSessionAction],\n    providers: [devinProvider],\n};\n"],"mappings":";AAAA;AAAA,EAMI,eAAAA;AAAA,OACG;;;ACPP,SAA6B,mBAAmB;AAChD,OAAO,WAAW;AAElB,IAAM,WAAW;AACjB,IAAM,uBAAuB;AAC7B,IAAM,cAAc;AACpB,IAAM,kBAAkB;AAExB,IAAI,kBAAkB;AA0BtB,eAAe,YAAY;AACvB,QAAM,MAAM,KAAK,IAAI;AACrB,QAAM,uBAAuB,MAAM;AACnC,MAAI,uBAAuB,sBAAsB;AAC7C,UAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,uBAAuB,oBAAoB,CAAC;AAAA,EACjG;AACA,oBAAkB,KAAK,IAAI;AAC/B;AAUA,eAAe,UACX,IACA,UAAU,aACV,UAAU,iBACA;AACV,MAAI;AACA,WAAO,MAAM,GAAG;AAAA,EACpB,SAAS,OAAO;AACZ,QAAI,YAAY,EAAG,OAAM;AAEzB,UAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,OAAO,CAAC;AACzD,WAAO,UAAU,IAAI,UAAU,GAAG,UAAU,CAAC;AAAA,EACjD;AACJ;AAUA,eAAsB,cAAc,SAAwB,QAAuC;AAC/F,QAAM,UAAU,QAAQ,WAAW,iBAAiB;AACpD,MAAI,CAAC,SAAS;AACV,UAAM,QAAQ,IAAI,MAAM,0BAA0B;AAClD,UAAM,SAAS;AACf,UAAM;AAAA,EACV;AAEA,QAAM,UAAU;AAChB,SAAO,UAAU,YAAY;AACzB,UAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,aAAa;AAAA,MACjD,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,iBAAiB,UAAU,OAAO;AAAA,QAClC,gBAAgB;AAAA,MACpB;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,CAAC;AAAA,IACnC,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,kBAAY,MAAM,mCAAmC,KAAK;AAC1D,YAAM,IAAI,MAAM,6BAA6B,KAAK,EAAE;AAAA,IACxD;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,WAAO;AAAA,EACX,CAAC;AACL;AASA,eAAsB,kBAAkB,SAAwB,WAA0C;AACtG,QAAM,UAAU,QAAQ,WAAW,iBAAiB;AACpD,MAAI,CAAC,SAAS;AACV,UAAM,QAAQ,IAAI,MAAM,0BAA0B;AAClD,UAAM,SAAS;AACf,UAAM;AAAA,EACV;AAEA,QAAM,UAAU;AAChB,SAAO,UAAU,YAAY;AACzB,UAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,YAAY,SAAS,IAAI;AAAA,MAC7D,SAAS;AAAA,QACL,iBAAiB,UAAU,OAAO;AAAA,MACtC;AAAA,IACJ,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,kBAAY,MAAM,kCAAkC,KAAK;AACzD,YAAM,WAAW,IAAI,MAAM,kCAAkC,KAAK,EAAE;AACpE,eAAS,SAAS,SAAS;AAC3B,YAAM;AAAA,IACV;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,WAAO;AAAA,EACX,CAAC;AACL;;;ADhIO,IAAM,qBAA6B;AAAA,EACtC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,UAAU,OAAO,SAAwB,aAAqB;AAC1D,WAAO,CAAC,CAAC,QAAQ,WAAW,iBAAiB;AAAA,EACjD;AAAA,EACA,SAAS,OACL,SACA,SACA,QACA,UACA,aACC;AACD,QAAI;AACA,UAAI,CAAC,UAAU;AACX,QAAAC,aAAY,MAAM,6CAA6C;AAC/D;AAAA,MACJ;AAEA,YAAM,SAAS,QAAQ,QAAQ;AAC/B,UAAI,CAAC,QAAQ;AACT,iBAAS,EAAE,MAAM,0CAA0C,GAAG,CAAC,CAAC;AAChE;AAAA,MACJ;AAEA,YAAM,cAAc,MAAM,cAAc,SAAS,MAAM;AACvD;AAAA,QACI;AAAA,UACI,MAAM;AAAA,cACZ,YAAY,UAAU;AAAA,UAC1B,YAAY,WAAW;AAAA,OAC1B,YAAY,GAAG;AAAA,UACF,QAAQ;AAAA,QACZ;AAAA,QACA,CAAC;AAAA,MACL;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,iCAAiC,KAAK;AACxD,UAAI,CAAC,UAAU;AACX;AAAA,MACJ;AACA,YAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU;AAC9D;AAAA,QACI;AAAA,UACI,MAAM,mCAAmC,YAAY;AAAA,UACrD,OAAO;AAAA,QACX;AAAA,QACA,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS,EAAE,MAAM,8DAA8D;AAAA,MACnF;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,wBAAwB,uBAAuB,qBAAqB;AAClF;;;AE7EA;AAAA,EAKI,eAAAC;AAAA,OACG;AAmBA,IAAM,gBAA0B;AAAA,EACnC,KAAK,OAAO,SAAwB,UAAkB,UAAkB;AACpE,QAAI;AACA,YAAM,UAAU,QAAQ,WAAW,iBAAiB;AACpD,UAAI,CAAC,SAAS;AACV,QAAAC,aAAY,MAAM,0BAA0B;AAC5C,eAAO;AAAA,UACH,OAAO;AAAA,UACP,YAAY,KAAK,IAAI;AAAA,QACzB;AAAA,MACJ;AAEA,YAAM,cAAc,+BAAO,UAAS,CAAC;AAGrC,UAAI,WAAW,WAAW;AACtB,YAAI;AACA,gBAAM,iBAAiB,MAAM,kBAAkB,SAAS,WAAW,SAAS;AAC5E,iBAAO;AAAA,YACH,WAAW,eAAe;AAAA,YAC1B,QAAQ,eAAe;AAAA,YACvB,KAAK,eAAe;AAAA,YACpB,YAAY,KAAK,IAAI;AAAA,YACrB,mBAAmB,eAAe;AAAA,UACtC;AAAA,QACJ,SAAS,OAAO;AACZ,UAAAA,aAAY,MAAM,mCAAmC,KAAK;AAC1D,iBAAO;AAAA,YACH,OAAO;AAAA,YACP,YAAY,KAAK,IAAI;AAAA,YACrB,WAAW,WAAW;AAAA;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AAGA,aAAO;AAAA,QACH,YAAY,KAAK,IAAI;AAAA,MACzB;AAAA,IACJ,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,2BAA2B,KAAK;AAClD,aAAO;AAAA,QACH,OAAO;AAAA,QACP,YAAY,KAAK,IAAI;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACnEO,IAAM,cAAsB;AAAA,EAC/B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,kBAAkB;AAAA,EAC5B,WAAW,CAAC,aAAa;AAC7B;","names":["elizaLogger","elizaLogger","elizaLogger","elizaLogger"]}